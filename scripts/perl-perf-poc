#!perl
use v5.36;
use File::Spec;
use Cwd;
use JSON::PP;
use FindBin;

my $verb = shift
  or die <<"EOS";
Usage:
  $0 bench config_name gitdir sha installbase outfile
     Build and benchmark
  $0 buildonly config_name gitdir sha installbase outfile
     Build only
  $0 benchonly config_name gitdir sha installbase outfile
     Benchmark only (requires previously built)
EOS

my @cfg_args;
my $verbose = 0;

while (@ARGV && $ARGV[0] =~ /^-/) {
  my $opt = shift;
  if ($opt =~ /^-[ADU]\w+/) {
    push @cfg_args, $opt;
  }
  elsif ($opt =~ /^-v$/) {
    $verbose = 1;
  }
  elsif ($opt =~ /^-v(\d+)$/a) {
    $verbose = $1;
  }
  else {
    die "$0: Unknown switch $opt\n";
  }
}

my $config_name = shift;
my $gitdir = shift;
my $commit = shift;
my $base = shift;
my $outfile = shift
  or die "Usage: $0 [-[ADU]name...] config_name checkoutdir sha base outfile\n";

my $start = getcwd();

my $absbench = File::Spec->catfile($FindBin::Bin, "perl-perf-poc-bench");

my $absgitdir = File::Spec->rel2abs($gitdir)
  or die "Cannot rel2abs $gitdir";

my $absbase = File::Spec->rel2abs($base)
  or die "Cannot rel2abs $base";

my $absoutfile = File::Spec->rel2abs($outfile)
  or die "Cannot rel2abs $outfile";

my $inst = "$absbase/$commit-$config_name";

my $absbenchmarks = File::Spec->catfile($absgitdir, "t", "perf", "benchmarks");

-f $absbenchmarks
  or die "Cannot find file $absbenchmarks: $!\n";

-f $absbench
  or die "Cannot find $absbench: $!\n";

print <<EOS;
verb    : $verb
gitdir  : $absgitdir
commit  : $commit
instbase: $absbase
inst    : $inst
outfile : $absoutfile
bench   : $absbench
name    : $config_name
cfg_args: @cfg_args
EOS

my $do_build = $verb =~ /^(bench|buildonly)$/;
if ($do_build) {
  print "Git stuff\n" if $verbose;
  chdir $absgitdir
    or die "Cannot chdir $gitdir: $!\n";

  system "git", "clean", "-dxfq"
    and die "Cannot git clean\n";

  system "git", "checkout", "."
    and die "Cannot checkout .\n";

  system "git", "checkout", $commit
    and die "Cannot checkout $commit\n";

  print "Configure\n" if $verbose;
  system "./Configure", "-des", "-Dprefix=$inst", "-Uversiononly",
    "-Dusedevel", @cfg_args
    and die "Cannot configure";

  print "Make\n" if $verbose;
  system "nice", "make", "-j3"
    and die "Cannot make";

# {
#   local $ENV{TEST_JOBS} = 4;
#   system "nice", "make", "test"
#     and die "Cannot make test";
# }

  print "Install\n" if $verbose;
  system "make", "install"
    and die "Cannot make install";

  print "Install libperf\n" if $verbose;
  system "$inst/bin/cpan", "Linux::libperf::Simple"
    and die "Cannot install Linux::libperf::Simple";
}

my $instperl = "$inst/bin/perl";

my $do_bench = $verb =~ /^(bench|benchonly)$/;
if ($do_bench) {
  my %build_cfg;

  #my $confsh_name = "$absgitdir/config.sh";
  open my $cfg_fh, "-|", $instperl, "-MConfig=config_sh", "-e", "print config_sh"
    or die "Cannot run $instperl: $!\n";
  while (<$cfg_fh>) {
    next if /^#/;
    next unless /^(\w+)=(.*)$/;
    my ($key, $val) = ($1, $2);
    $val =~ s/^'(.*)'$/$1/;
    
    $build_cfg{$key} = $val;
  }
  close $cfg_fh;
  #$build_cfg{cc} eq "cc" or die;


  {
    print "Benchmark\n" if $verbose;
    local $ENV{PERL_HASH_SEED} = "0";
    my @bench = ( $instperl , $absbench, "-v$verbose", $absbenchmarks, $absoutfile );
    print "  @bench\n" if $verbose > 1;
    system @bench
      and die "Cannot run benchmark: $!";
  }

  print "Build report\n" if $verbose;
  my $json;

  {
    open my $fh, "<:raw", $absoutfile
      or die "Cannot open $absoutfile: $!\n";
    $json = do { local $/; <$fh> };
    close $fh;
  }

  my $bench_data = decode_json($json);

  # rearrange a bit
  chomp(my $uname = `uname -a`);

  my $deps = delete $bench_data->{dependencies} || {};

  my %result =
    (
     system =>
     {
      uname => $build_cfg{myuname},
      cc => $build_cfg{cc},
      ccversion => $build_cfg{ccversion} || $build_cfg{gccversion} || "unknown",
      cpu => cpu_info(),
     },
     config =>
     {
      config_args => [ config_args(\%build_cfg) ],
      map { $_ => $build_cfg{$_} }
      qw( ccflags usethreads usemultiplicity useshrplib optimize
	  uselongdouble usequadmath
	  alignbytes ),
     },
     benchmark => $bench_data,
    );

  {
    open my $fh, ">:raw", $absoutfile
      or die "Cannot overwrite $absoutfile: $!\n";
    print $fh encode_json(\%result);
    close $fh
      or die "Cannot close $outfile: $!\n";
  }
}

sub config_args {
  my $config = shift;

  my @result;
  for my $num (0 .. $config->{config_argc}) {
    my $arg = $config->{"config_arg$num"};
    if ($arg =~ /^-Dprefix=/) {
      $arg = "-Dprefix=...";
    }
    push @result, $arg;
  }

  @result;
}

# this will definitely change
sub cpu_info {
  open my $fh, "<", "/proc/cpuinfo"
    or die "Cannot open /proc/cpuinfo: $!\n";
  my %summary;
  while (<$fh>) {
    chomp;
    if (/^model name\s+:\s+(.*)/) {
      ++$summary{$1};
    }
  }
  return \%summary;
}
